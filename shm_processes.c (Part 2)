#include <stdio.h>
#include <stdlib.h>
#include <sys/types.h>
#include <sys/ipc.h>
#include <sys/shm.h>
#include <unistd.h>
#include <sys/wait.h>
#include <time.h>

#define DEPOSIT 0
#define WITHDRAW 1

void ParentProcess(int *);
void ChildProcess(int *);

int main() {
    int ShmID;
    int *ShmPTR;
    pid_t pid;
    int status;

    ShmID = shmget(IPC_PRIVATE, 2 * sizeof(int), IPC_CREAT | 0666);
    if (ShmID < 0) {
        fprintf(stderr, "*** shmget error (server) ***\n");
        exit(1);
    }

    ShmPTR = (int *)shmat(ShmID, NULL, 0);
    if (*ShmPTR == -1) {
        fprintf(stderr, "*** shmat error (server) ***\n");
        exit(1);
    }

    ShmPTR[0] = 0; // BankAccount
    ShmPTR[1] = 0; // Turn

    printf("Server has created shared variables BankAccount and Turn...\n");

    printf("Server is about to fork a child process...\n");
    pid = fork();
    if (pid < 0) {
        fprintf(stderr, "*** fork error (server) ***\n");
        exit(1);
    } else if (pid == 0) {
        ChildProcess(ShmPTR);
        exit(0);
    }

    ParentProcess(ShmPTR);

    wait(&status);
    printf("Server has detected the completion of its child...\n");
    shmdt((void *)ShmPTR);
    printf("Server has detached its shared memory...\n");
    shmctl(ShmID, IPC_RMID, NULL);
    printf("Server has removed its shared memory...\n");
    printf("Server exits...\n");
    exit(0);
}

void ParentProcess(int *SharedMem) {
    srand(time(NULL));

    for (int i = 0; i < 25; i++) {
        sleep(rand() % 6); // Sleep between 0-5 seconds

        int account = SharedMem[0];
        while (SharedMem[1] != 0)
            ; // Busy-waiting

        if (account <= 100) {
            int action = rand() % 2; // 0 for DEPOSIT, 1 for WITHDRAW
            int balance = rand() % 101; // Random balance between 0-100

            if (action == DEPOSIT) {
                SharedMem[0] += balance;
                printf("Dear old Dad: Deposits $%d / Balance = $%d\n", balance, SharedMem[0]);
            } else {
                printf("Dear old Dad: Doesn't have any money to give\n");
            }
        } else {
            printf("Dear old Dad: Thinks Student has enough Cash ($%d)\n", account);
        }

        SharedMem[1] = 1; // Set Turn = 1
    }
}

void ChildProcess(int *SharedMem) {
    srand(time(NULL));

    for (int i = 0; i < 25; i++) {
        sleep(rand() % 6); // Sleep between 0-5 seconds

        int account = SharedMem[0];
        while (SharedMem[1] != 1)
            ; // Busy-waiting

        int balance = rand() % 51; // Random balance needed between 0-50
        printf("Poor Student needs $%d\n", balance);

        if (balance <= account) {
            SharedMem[0] -= balance;
            printf("Poor Student: Withdraws $%d / Balance = $%d\n", balance, SharedMem[0]);
        } else {
            printf("Poor Student: Not Enough Cash ($%d)\n", account);
        }

        SharedMem[1] = 0; // Set Turn = 0
    }
}
